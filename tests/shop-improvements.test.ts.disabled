import { test, expect } from '@playwright/test'

test.describe('Shop Improvements', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to shop page before each test
    await page.goto('/shop')
  })

  test('should display products correctly', async ({ page }) => {
    // Wait for products to load
    await page.waitForSelector('[data-testid="product-card"]', { timeout: 10000 })
    
    // Check that products are displayed
    const productCards = await page.locator('[data-testid="product-card"]').count()
    expect(productCards).toBeGreaterThan(0)
    
    // Verify product information is displayed
    const firstProduct = page.locator('[data-testid="product-card"]').first()
    await expect(firstProduct.locator('[data-testid="product-title"]')).toBeVisible()
    await expect(firstProduct.locator('[data-testid="product-price"]')).toBeVisible()
    await expect(firstProduct.locator('[data-testid="add-to-cart-button"]')).toBeVisible()
  })

  test('should show correct product count', async ({ page }) => {
    // Wait for loading to complete
    await page.waitForSelector('[data-testid="product-count"]', { timeout: 10000 })
    
    // Get the displayed product count
    const countText = await page.locator('[data-testid="product-count"]').textContent()
    const count = parseInt(countText?.match(/\d+/)?.[0] || '0')
    
    // Verify count is greater than 0
    expect(count).toBeGreaterThan(0)
    
    // Verify count matches actual displayed products
    const productCards = await page.locator('[data-testid="product-card"]').count()
    expect(count).toBeGreaterThanOrEqual(productCards)
  })

  test('should filter products by category', async ({ page }) => {
    // Wait for filters to load
    await page.waitForSelector('[data-testid="category-filter"]', { timeout: 10000 })
    
    // Click on Electronics category
    await page.locator('[data-testid="category-filter"]').filter({ hasText: 'Electronics' }).click()
    
    // Wait for filtered results
    await page.waitForTimeout(2000)
    
    // Verify only electronics products are shown
    const productCards = await page.locator('[data-testid="product-card"]').count()
    if (productCards > 0) {
      const categoryText = await page.locator('[data-testid="product-category"]').first().textContent()
      expect(categoryText).toContain('Electronics')
    }
  })

  test('should search products', async ({ page }) => {
    // Wait for search input to be visible
    await page.waitForSelector('[data-testid="search-input"]', { timeout: 10000 })
    
    // Type search query
    await page.locator('[data-testid="search-input"]').fill('gaming')
    
    // Wait for search results
    await page.waitForTimeout(2000)
    
    // Verify search results contain the query
    const productCards = await page.locator('[data-testid="product-card"]').count()
    if (productCards > 0) {
      const title = await page.locator('[data-testid="product-title"]').first().textContent()
      expect(title?.toLowerCase()).toContain('gaming')
    }
  })

  test('should filter by price range', async ({ page }) => {
    // Wait for price filter to load
    await page.waitForSelector('[data-testid="price-range-slider"]', { timeout: 10000 })
    
    // Set price range to 0-100
    const slider = page.locator('[data-testid="price-range-slider"]')
    await slider.evaluate((el, value) => {
      el.value = value
      el.dispatchEvent(new Event('input'))
    }, 100)
    
    // Wait for filtered results
    await page.waitForTimeout(2000)
    
    // Verify products are within price range
    const productCards = await page.locator('[data-testid="product-card"]').count()
    if (productCards > 0) {
      const prices = await page.locator('[data-testid="product-price"]').allTextContents()
      prices.forEach(price => {
        const priceValue = parseFloat(price.replace(/[^0-9.]/g, ''))
        expect(priceValue).toBeLessThanOrEqual(100)
      })
    }
  })

  test('should add products to cart', async ({ page }) => {
    // Wait for products to load
    await page.waitForSelector('[data-testid="add-to-cart-button"]', { timeout: 10000 })
    
    // Click add to cart on first product
    await page.locator('[data-testid="add-to-cart-button"]').first().click()
    
    // Verify toast notification appears
    await expect(page.locator('[data-testid="toast"]')).toBeVisible()
    
    // Verify cart count increases
    const cartCount = await page.locator('[data-testid="cart-count"]').textContent()
    expect(parseInt(cartCount || '0')).toBeGreaterThan(0)
  })

  test('should display product ratings and reviews', async ({ page }) => {
    // Wait for products to load
    await page.waitForSelector('[data-testid="product-rating"]', { timeout: 10000 })
    
    // Verify rating is displayed
    const rating = await page.locator('[data-testid="product-rating"]').first().textContent()
    expect(rating).toMatch(/\d+\.\d+/)
    
    // Verify review count is displayed
    const reviewCount = await page.locator('[data-testid="product-review-count"]').first().textContent()
    expect(reviewCount).toMatch(/\(\d+\)/)
  })

  test('should show supplier information', async ({ page }) => {
    // Wait for products to load
    await page.waitForSelector('[data-testid="supplier-name"]', { timeout: 10000 })
    
    // Verify supplier name is displayed
    await expect(page.locator('[data-testid="supplier-name"]').first()).toBeVisible()
    
    // Verify verified badge is shown
    await expect(page.locator('[data-testid="verified-badge"]').first()).toBeVisible()
  })

  test('should handle empty search results', async ({ page }) => {
    // Wait for search input to be visible
    await page.waitForSelector('[data-testid="search-input"]', { timeout: 10000 })
    
    // Search for non-existent product
    await page.locator('[data-testid="search-input"]').fill('nonexistentproduct12345')
    
    // Wait for search results
    await page.waitForTimeout(2000)
    
    // Verify no results message is shown
    await expect(page.locator('[data-testid="no-results-message"]')).toBeVisible()
  })

  test('should maintain filter state in URL', async ({ page }) => {
    // Wait for filters to load
    await page.waitForSelector('[data-testid="category-filter"]', { timeout: 10000 })
    
    // Apply a filter
    await page.locator('[data-testid="category-filter"]').filter({ hasText: 'Fashion' }).click()
    
    // Verify URL contains the filter
    await page.waitForTimeout(1000)
    const url = page.url()
    expect(url).toContain('category=Fashion')
    
    // Refresh page
    await page.reload()
    
    // Verify filter is still applied
    await page.waitForSelector('[data-testid="category-filter"]', { timeout: 10000 })
    const activeFilter = page.locator('[data-testid="category-filter"]').filter({ hasText: 'Fashion' })
    await expect(activeFilter).toHaveClass(/bg-indigo-600/)
  })
})

test.describe('Onboarding Improvements', () => {
  test('should complete onboarding flow', async ({ page }) => {
    // Navigate to onboarding
    await page.goto('/auth/onboarding?role=influencer')
    
    // Wait for onboarding to load
    await page.waitForSelector('[data-testid="onboarding-step"]', { timeout: 10000 })
    
    // Verify first step is displayed
    await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Basics')
    
    // Fill in basic information
    await page.locator('[data-testid="name-input"]').fill('Test User')
    await page.locator('[data-testid="display-name-input"]').fill('testuser')
    await page.locator('[data-testid="country-select"]').click()
    await page.getByRole('option', { name: 'US' }).click()
    await page.locator('[data-testid="phone-input"]').fill('+1234567890')
    
    // Click next
    await page.locator('[data-testid="next-button"]').click()
    
    // Verify second step is displayed
    await expect(page.locator('[data-testid="onboarding-step"]')).toContainText('Profile Details')
    
    // Fill in influencer profile
    await page.locator('[data-testid="bio-input"]').fill('Test bio')
    await page.locator('[data-testid="audience-size-select"]').click()
    await page.getByRole('option', { name: '1000-10000' }).click()
    
    // Click next
    await page.locator('[data-testid="next-button"]').click()
    
    // Verify progress is updated
    const progress = await page.locator('[data-testid="progress-bar"]').getAttribute('aria-valuenow')
    expect(parseInt(progress || '0')).toBeGreaterThan(33)
  })
})
