import fs from "fs/promises";
import path from "path";

interface TestResult {
  suite: string;
  test: string;
  status: "passed" | "failed" | "skipped";
  duration: number;
  error?: string;
  screenshot?: string;
  trace?: string;
}

export async function generateMarkdownReport(
  results: TestResult[]
): Promise<void> {
  // Determine report directory in a cross-platform way
  const configuredDir = process.env.REPORT_DIR;
  const reportDir = configuredDir
    ? path.resolve(configuredDir)
    : path.join(process.cwd(), "test-results", "Dashboard Report");

  await fs.mkdir(reportDir, { recursive: true });

  const timestamp = new Date().toISOString().replace(/:/g, "-");
  const passed = results.filter((r) => r.status === "passed").length;
  const failed = results.filter((r) => r.status === "failed").length;
  const skipped = results.filter((r) => r.status === "skipped").length;
  const total = results.length || 1;

  let markdown = `# Dashboard E2E Test Report
**Generated:** ${new Date().toLocaleString()}
**Total Tests:** ${total} | ‚úÖ Passed: ${passed} | ‚ùå Failed: ${failed} | ‚è≠Ô∏è Skipped: ${skipped}

---

## Summary

| Metric | Count | Percentage |
|--------|-------|------------|
| ‚úÖ Passed | ${passed} | ${((passed / total) * 100).toFixed(1)}% |
| ‚ùå Failed | ${failed} | ${((failed / total) * 100).toFixed(1)}% |
| ‚è≠Ô∏è Skipped | ${skipped} | ${((skipped / total) * 100).toFixed(1)}% |

---

## Test Results by Suite

`;

  const suites = [...new Set(results.map((r) => r.suite))];
  for (const suite of suites) {
    const suiteResults = results.filter((r) => r.suite === suite);
    const suitePassed = suiteResults.filter(
      (r) => r.status === "passed"
    ).length;

    markdown += `### ${suite}\n\n`;
    markdown += `**Results:** ${suitePassed}/${suiteResults.length} passed\n\n`;
    for (const result of suiteResults) {
      const icon =
        result.status === "passed"
          ? "‚úÖ"
          : result.status === "failed"
            ? "‚ùå"
            : "‚è≠Ô∏è";
      markdown += `${icon} **${result.test}**\n`;
      markdown += `   - Status: ${result.status}\n`;
      markdown += `   - Duration: ${result.duration}ms\n`;
      if (result.error)
        markdown += `   - Error:\n\`\`\`\n${result.error}\n\`\`\`\n`;
      if (result.screenshot)
        markdown += `   - [View Screenshot](${result.screenshot})\n`;
      if (result.trace) markdown += `   - [View Trace](${result.trace})\n`;
      markdown += `\n`;
    }
  }

  // Known Issues section: load from tests/KNOWN_ISSUES.md
  markdown += `---

## Known Issues (From Handover Docs)

`;

  const knownIssuesPath = path.join(__dirname, "..", "..", "KNOWN_ISSUES.md");
  try {
    const knownIssues = await fs.readFile(knownIssuesPath, "utf-8");
    const trimmed = knownIssues.trim();
    markdown += `${trimmed}\n\n`;
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error("Failed to read KNOWN_ISSUES.md:", err);
    markdown += `_(No KNOWN_ISSUES.md found or readable. Please add tests/KNOWN_ISSUES.md.)_\n\n`;
  }

  markdown += `---

## How to View Detailed Results

1. **HTML Report:** Open \`html-report/index.html\` in browser
2. **JSON Results:** Import \`test-results.json\` for programmatic analysis
3. **Traces:** Click trace links above or use \`npx playwright show-trace <trace-file>\`

---

*Report generated by Playwright E2E Test Suite*
`;

  const reportPath = path.join(reportDir, `test-report-${timestamp}.md`);
  await fs.writeFile(reportPath, markdown, "utf-8");
  // eslint-disable-next-line no-console
  console.log(`\nüìä Markdown report saved to: ${reportPath}`);
}
