# CodeRabbit configuration for review-only safety and best practices
language: "en-US"

reviews:
  profile: "chill"
  request_changes_workflow: false
  high_level_summary: true
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: false
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: false
  auto_apply_labels: false
  suggested_reviewers: false
  auto_assign_reviewers: false
  # Only review core source files (no .md / .txt) and core configs
  path_filters:
    # Source code (TS/JS/TSX/JSX only)
    - "app/**/*.{ts,tsx,js,jsx}"
    - "components/**/*.{ts,tsx,js,jsx}"
    - "lib/**/*.{ts,tsx,js,jsx}"
    - "hooks/**/*.{ts,tsx,js,jsx}"
    - "types/**/*.{ts,tsx,js,jsx}"
    - "styles/**/*.{ts,tsx,js,jsx}"
    - "tests/**/*.{ts,tsx,js,jsx}"
    - "scripts/**/*.{ts,js,mjs}"
    - "middleware.ts"
    # Core project config
    - "next.config.mjs"
    - "playwright.config.ts"
    - "vitest.config.ts"
    - "tsconfig.json"
    - "package.json"
    - "pnpm-lock.yaml"
    - "pnpm-workspace.yaml"
    - "vercel.json"
    - "components.json"
    - ".npmrc"
    # GitHub Actions (allow editing workflows)
    - ".github/workflows/**/*.yml"
    - ".github/actions/**"
    # Explicitly exclude docs/reports/backups by omission (docs/**, dashboard-build/**, Reports/**, Code freeze/**, public/**, supabase/**, sql/**, *.md, *.txt)
  
  # Strong guidance by sensitive paths
  path_instructions:
    - path: "app/api/**"
      instructions: &api_instr |
        API routes are sensitive and must be reviewed by a human.
        - Verify read-only behavior unless explicitly intended to mutate.
        - Enforce freeze checks (e.g., SHOPS_FREEZE/core freeze) before any write.
        - Validate inputs, sanitize outputs, avoid leaking internal error details.
        - Check auth/role requirements; no privilege escalation.
        - No auto-fixes or auto-merges; flag risky changes.
    - path: "lib/auth/**"
      instructions: &auth_instr |
        Auth changes are high risk and require human review.
        - Ensure secure use of Supabase sessions, cookies, and listeners.
        - Avoid breaking existing sign-in/out flows and role routing.
        - Do not modify server/middleware auth logic via automated actions.
        - No storage of secrets; avoid exposing tokens in client code.
    - path: "app/(auth)/**"
      instructions: *auth_instr
    - path: "app/sign-in/**"
      instructions: *auth_instr
    - path: "app/sign-out/**"
      instructions: *auth_instr
    - path: "middleware.ts"
      instructions: |
        Middleware modifications require human review.
        - Preserve existing auth/redirect logic and freeze protections.
        - Watch for performance regressions and infinite loops.
    - path: "supabase/**"
      instructions: &db_instr |
        Database schema/migration changes require human review.
        - Guard against destructive operations; ensure RLS and policies are correct.
        - Verify indexes, performance, and backwards compatibility.
        - Ensure migration safety (idempotent, transactional where possible).
    - path: "sql/**"
      instructions: *db_instr
    - path: "sql/migrations/**"
      instructions: *db_instr
    - path: "scripts/**"
      instructions: &scripts_instr |
        Scripts must not auto-apply changes in CI without approvals.
        - Validate that scripts are safe, use dry-run where possible.
        - No credentials or secrets hardcoded.
    - path: "**/*.ps1"
      instructions: *scripts_instr
    - path: "**/*.sh"
      instructions: *scripts_instr

  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: true
    base_branches: [".*"]
    ignore_usernames: []

pre_merge_checks:
  title:
    mode: "warning"
    requirements: "Title should be concise and descriptive; include scope and area (e.g., auth, api, db)."
  description:
    mode: "warning"
  issue_assessment:
    mode: "warning"
  custom_checks:
    - name: "Auth Security Review"
      instructions: |
        Check for auth security patterns:
        - Proper session handling, cookie sync, secure listeners.
        - No exposure of secrets or tokens.
        - Role checks consistent with server-side policies.
        - Changes must be called out for HUMAN REVIEW.
    - name: "API Route Safety & Freeze Guards"
      instructions: |
        For API changes, ensure:
        - No unintended data mutations; validate inputs/outputs.
        - Freeze checks (e.g., SHOPS_FREEZE/core freeze) enforced before writes.
        - No internal error leakage; sanitized errors only.
        - Flag for HUMAN REVIEW; do not auto-approve.
    - name: "Database Mutation Guards & Performance"
      instructions: |
        For DB-related changes (queries, schema, migrations):
        - Guard against destructive changes; verify RLS and policies.
        - Consider indexes, query plans, and performance impacts.
        - Ensure backward compatibility and safe rollouts.
        - Require HUMAN REVIEW.
    - name: "Performance & Breaking Changes Scan"
      instructions: |
        Identify performance risks (N+1 queries, heavy loops, blocking I/O on hot paths).
        Detect breaking changes to working features and public contracts.
        Flag any risks for HUMAN REVIEW; do not auto-fix or auto-merge.

# Tools kept enabled for lint/static analysis only; no auto-fixes or commits.
tools:
  eslint:
    enabled: true
  actionlint:
    enabled: true
  yamllint:
    enabled: true
  markdownlint:
    enabled: false  # disable to avoid scanning large doc trees
  semgrep:
    enabled: true
  gitleaks:
    enabled: true
  sqlfluff:
    enabled: false  # disable DB-focused lint to reduce workload on non-DB PRs
  osvScanner:
    enabled: false  # optional: disable dependency vuln scan if CodeRabbit runs out of memory

# Chat and code generation features not used for auto-fixes.
chat:
  art: false
  auto_reply: false

code_generation:
  docstrings:
    path_instructions: []
  unit_tests:
    path_instructions: []
