/**
 * Domain Types - Single Source of Truth
 *
 * Centralized type definitions for core domain entities.
 * These types represent the canonical shape of data across the application.
 *
 * IMPORTANT NOTES:
 * - Product images: images[0] is always the primary image (derived from DB primary_image)
 * - NEVER manually set primary_image; it's auto-generated by DB triggers
 * - Shop products: Can be string[] or array of objects with customizations
 *
 * @module types/domain
 */

// ============================================================================
// USER & AUTH
// ============================================================================

export type UserRole = 'admin' | 'supplier' | 'influencer' | 'customer'

export interface UserProfile {
  id: string
  email?: string
  name: string
  roles: UserRole[]  // Array for future multi-role support
  avatar?: string
  verified?: boolean
  created_at: string
  updated_at: string
}

export interface OnboardingState {
  user_id: string
  status: 'draft' | 'submitted' | 'completed'
  target_role?: 'supplier' | 'influencer' | 'admin' | 'customer'
  current_step: number
  created_at: string
  updated_at: string
}

// ============================================================================
// PRODUCTS
// ============================================================================

/**
 * Product entity (full detail)
 *
 * Represents a supplier's product with complete metadata.
 * Used in product management, detail pages, and admin views.
 */
export interface Product {
  id: string
  title: string
  description?: string
  short_description?: string  // For catalog cards (max 160 chars)
  price: number
  original_price?: number
  images: string[]  // images[0] = primary image (auto-derived from DB)
  category: string
  brand?: string
  region?: string[]
  in_stock: boolean
  stock_count: number
  commission: number  // Percentage (e.g., 15 = 15%)
  active: boolean
  supplier_id: string
  sku?: string
  created_at: string
  updated_at: string
}

/**
 * Product feed item (lightweight)
 *
 * Used in catalog/shop listing pages. Omits heavy fields like full description.
 * Consistent shape across main shop feed and influencer shop feeds.
 */
export interface ShopFeedItem {
  id: string
  title: string
  price: number
  images: string[]  // images[0] = primary image
  category: string
  brand?: string
  short_description?: string
  in_stock: boolean
  stock_count: number
  created_at: string
}

/**
 * Product customization (for influencer shops)
 *
 * Allows influencers to override product presentation and pricing.
 */
export interface ProductCustomization {
  product_id: string
  custom_title?: string
  sale_price?: number  // Influencer can set custom price
  published?: boolean  // Whether shown in influencer's shop
  order?: number       // Display order in shop
}

// ============================================================================
// SHOPS
// ============================================================================

/**
 * Influencer shop
 *
 * Represents a curated collection of products by an influencer.
 * products field can be:
 * 1. string[] - Simple array of product IDs
 * 2. ProductCustomization[] - Array with per-product customizations
 */
export interface Shop {
  id: string
  handle: string  // URL-friendly unique identifier (e.g., "jane-beauty")
  name: string
  description?: string
  logo?: string
  banner?: string
  influencer_id: string
  products: string[] | ProductCustomization[]  // Flexible product storage
  active: boolean
  created_at: string
  updated_at: string
}

/**
 * Shop with expanded product details
 *
 * Used in shop management dashboards where we need full product info.
 */
export interface ShopWithProducts extends Omit<Shop, 'products'> {
  products: Array<{
    product: Product
    customization?: ProductCustomization
  }>
}

// ============================================================================
// ORDERS & CHECKOUT
// ============================================================================

export interface CartItem {
  id: string
  product_id: string
  title: string
  price: number
  quantity: number
  image: string
  influencer_handle?: string
  category?: string
  supplier_id?: string
  supplier_name?: string
  supplier_verified?: boolean
  max_quantity?: number
  original_price?: number
}

export interface Address {
  street: string
  city: string
  state: string
  zip_code: string
  country: string
}

export interface Order {
  id: string
  customer_id: string
  items: CartItem[]
  total: number
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled'
  shipping_address: Address
  billing_address: Address
  payment_method: string
  stripe_payment_intent_id?: string
  created_at: string
  updated_at: string
}

// ============================================================================
// COMMISSIONS
// ============================================================================

export interface Commission {
  id: string
  order_id: string
  influencer_id: string
  supplier_id: string
  product_id: string
  amount: number  // Actual commission amount in currency
  rate: number    // Percentage rate used
  status: 'pending' | 'paid' | 'disputed'
  created_at: string
  paid_at?: string
}

// ============================================================================
// VERIFICATION (KYC/KYB)
// ============================================================================

export type VerificationStatus = 'draft' | 'submitted' | 'in_review' | 'verified' | 'rejected'

export type DocumentType =
  | 'government_id'
  | 'bank_book'
  | 'bank_account_book'
  | 'business_registration'
  | 'mail_order_sales_report'
  | 'identity_card'
  | 'passport'
  | 'drivers_license'
  | 'tax_certificate'
  | 'utility_bill'
  | 'other'

export interface VerificationRequest {
  id: string
  user_id: string
  role: UserRole
  status: VerificationStatus
  rejection_reason?: string
  submitted_at?: string
  reviewed_at?: string
  reviewed_by?: string
  created_at: string
  updated_at: string
}

export interface VerificationDocument {
  id: string
  request_id: string
  doc_type: DocumentType
  storage_path: string
  mime_type: string
  size_bytes: number
  status: 'pending' | 'verified' | 'rejected'
  rejection_reason?: string
  created_at: string
  updated_at: string
}

// ============================================================================
// BRAND/SUPPLIER DETAILS
// ============================================================================

export interface BrandCompany {
  id: string
  user_id: string
  legal_name: string
  trade_name?: string
  website?: string
  support_email: string
  tax_country: string
  business_registration_number?: string
  mail_order_license_number?: string
  address: {
    street: string
    city: string
    state: string
    zip_code: string
    country: string
  }
  created_at: string
  updated_at: string
}

export interface BrandCommissionDefaults {
  id: string
  brand_user_id: string
  rate_percent: number
  currency: string
  created_at: string
  updated_at: string
}

// ============================================================================
// INFLUENCER PAYOUTS
// ============================================================================

export interface InfluencerPayouts {
  id: string
  user_id: string
  bank_holder: string
  bank_name: string
  account_number_encrypted: string
  iban_encrypted?: string
  country: string
  created_at: string
  updated_at: string
}

// ============================================================================
// API RESPONSES
// ============================================================================

export interface ApiResponse<T = any> {
  ok: boolean
  data?: T
  error?: string
  message?: string
  fieldErrors?: Record<string, string[]>
}

export interface PaginatedResponse<T> {
  ok: boolean
  data: {
    items: T[]
    page: number
    limit: number
    total: number
    hasMore: boolean
  }
  error?: string
}

/**
 * Feed response (for shop listings)
 *
 * Standardized response shape for main shop and influencer shop feeds.
 */
export interface FeedResponse {
  ok: boolean
  data: {
    items: ShopFeedItem[]
    page: number
    limit: number
    total: number
    hasMore: boolean
  }
  error?: string
}

// ============================================================================
// FREEZE & DRY-RUN
// ============================================================================

export interface FreezeStatus {
  coreFreeze: boolean      // Onboarding & dashboards frozen
  shopsFreeze: boolean     // Shop/product writes frozen
  dryRunOnboarding: boolean // Onboarding in dry-run mode
}

export interface DryRunResponse extends ApiResponse {
  dryRun: true
  role: UserRole
  redirectPath: string
  message: string
}

// ============================================================================
// UTILITY TYPES
// ============================================================================

/**
 * Make specific fields required
 */
export type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] }

/**
 * Make specific fields optional
 */
export type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>

/**
 * Timestamp fields
 */
export interface Timestamps {
  created_at: string
  updated_at: string
}

/**
 * Soft delete support
 */
export interface SoftDeletable extends Timestamps {
  deleted_at?: string | null
}
