name: Secrets Smoke Validation

on:
  workflow_dispatch:
    inputs:
      ping_db:
        description: "Attempt a minimal DB connection (psql select 1)?"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

jobs:
  validate-secrets:
    name: Validate secrets format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (no submodules)
        uses: actions/checkout@v4

      - name: Validate SUPABASE URL and keys (format only)
        shell: bash
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          set -euo pipefail
          echo "Validating NEXT_PUBLIC_SUPABASE_URL format..."
          if [[ -z "${NEXT_PUBLIC_SUPABASE_URL:-}" ]]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_URL is empty" >&2; exit 1; fi
          if ! echo "$NEXT_PUBLIC_SUPABASE_URL" | grep -Eq '^https://[^/]+\.supabase\.(co|in)$'; then
            echo "Error: NEXT_PUBLIC_SUPABASE_URL must match https://<project>.supabase.co|in" >&2; exit 1; fi

          echo "Validating ANON key JWT shape..."
          if [[ -z "${NEXT_PUBLIC_SUPABASE_ANON_KEY:-}" ]]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_ANON_KEY is empty" >&2; exit 1; fi
          if [[ $(awk -F. '{print NF-1}' <<<"$NEXT_PUBLIC_SUPABASE_ANON_KEY") -ne 2 ]]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_ANON_KEY must be a JWT (3 parts)" >&2; exit 1; fi

          echo "Validating SERVICE ROLE key JWT shape..."
          if [[ -z "${SUPABASE_SERVICE_ROLE_KEY:-}" ]]; then
            echo "Error: SUPABASE_SERVICE_ROLE_KEY is empty" >&2; exit 1; fi
          if [[ $(awk -F. '{print NF-1}' <<<"$SUPABASE_SERVICE_ROLE_KEY") -ne 2 ]]; then
            echo "Error: SUPABASE_SERVICE_ROLE_KEY must be a JWT (3 parts)" >&2; exit 1; fi

          echo "✅ Secrets basic format checks passed."

      - name: Optional DB ping
        if: ${{ inputs.ping_db == 'true' }}
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          PGHOST: ${{ secrets.PGHOST }}
          PGPORT: ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
        run: |
          set -euo pipefail
          echo "Attempting minimal DB connectivity check..."
          sudo apt-get update -y >/dev/null 2>&1
          sudo apt-get install -y postgresql-client >/dev/null 2>&1

          if [[ -n "${PGHOST:-}" && -n "${PGPORT:-}" && -n "${PGDATABASE:-}" && -n "${PGUSER:-}" && -n "${PGPASSWORD:-}" ]]; then
            echo "Using discrete PG* env variables..."
            psql "host=$PGHOST port=${PGPORT} dbname=${PGDATABASE} user=${PGUSER}" -c 'select 1;' >/dev/null
            echo "✅ PG* env DB ping OK"
          elif [[ -n "${SUPABASE_DB_URL:-}" ]]; then
            echo "Using SUPABASE_DB_URL..."
            # Detect invalid percent encodings (any % not followed by two hex digits)
            if echo "$SUPABASE_DB_URL" | grep -Pq '%(?![0-9A-Fa-f]{2})'; then
              echo "Error: SUPABASE_DB_URL likely has invalid percent-encoding (bare %)." >&2; exit 1; fi
            PGPASSWORD='' psql "$SUPABASE_DB_URL" -c 'select 1;' >/dev/null || {
              echo "Error: DB ping failed via SUPABASE_DB_URL" >&2; exit 1; }
            echo "✅ DB URL ping OK"
          else
            echo "⚠️  No DB credentials provided; skipping DB ping."
          fi

          echo "✅ Secrets smoke validation complete."
